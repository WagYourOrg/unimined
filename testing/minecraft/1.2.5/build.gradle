plugins {
    id 'java'
    id 'xyz.wagyourtail.unimined' // version '1.0.0'
}

group 'com.example'
base.archivesName = 'UniminedExampleMod'
version '1.0.0'

// this is just here so we can test the outputs easier and clean between tests
unimined.useGlobalCache = false

sourceSets {
    mcpMain
    modloader
    forge {
        compileClasspath += sourceSets.modloader.output
        runtimeClasspath += sourceSets.modloader.output
    }

    calamusMain
    fabric
    quilt {
        compileClasspath += sourceSets.fabric.output
        runtimeClasspath += sourceSets.fabric.output
    }
}

// Calamus - Fabric & Quilt

unimined.minecraft(sourceSets.calamusMain) {
    combineWith(sourceSets.main)
    version '1.2.5'
    side 'client'

    mappings {
        calamus()
        feather(20)

        devFallbackNamespace 'intermediary'
    }

    defaultRemapJar = false
}

unimined.minecraft(sourceSets.fabric) {
    combineWith(sourceSets.calamusMain)

    fabric {
        loader project.fabric_version
    }
}

unimined.minecraft(sourceSets.quilt) {
    combineWith(sourceSets.calamusMain)

    quilt {
        loader project.quilt_version
    }
}

// MCP - Forge & ModLoader

unimined.minecraft(sourceSets.mcpMain) {
    combineWith(sourceSets.main)
    version '1.2.5'
    side 'client'

    mappings {
        mcp('legacy', "${project.mcp_version}-${project.minecraft_version}")
        stub.withMappings(['searge', 'mcp']) {
            c('ModLoader', 'net/minecraft/src/ModLoader', 'net/minecraft/src/ModLoader')
            c('BaseMod', 'net/minecraft/src/BaseMod', 'net/minecraft/src/BaseMod')
            c('MLProp', 'net/minecraft/src/MLProp', 'net/minecraft/src/MLProp')
        }
    }

    minecraftRemapper.config {
        ignoreConflicts(true)
    }

    defaultRemapJar = false
}

unimined.minecraft(sourceSets.modloader) {
    combineWith(sourceSets.mcpMain)

    jarMod {
        transforms('exampleMod.transform')
    }
}

unimined.minecraft(sourceSets.forge) {
    combineWith(sourceSets.mcpMain)

    minecraftForge {
        loader project.forge_version
        forgeTransformer.transforms('exampleMod.transform')
    }

    runs {
        config('client') {
            jvmArgs("-Djma.debug=true")
        }
    }
}

repositories {
    unimined.wagYourMaven('releases')
}

dependencies {
    modloaderJarMod "risugami:modloader:${project.minecraft_version}"
}

tasks.withType(ProcessResources).configureEach {
    inputs.property 'version', project.version
    filesMatching('exampleMod.properties') {
        expand 'version': project.version
    }
    filesMatching('*.mod.json') {
        expand 'version': project.version
    }
}

java {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}
